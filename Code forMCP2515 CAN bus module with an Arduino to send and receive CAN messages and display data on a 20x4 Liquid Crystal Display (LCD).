#include <SPI.h>              // Library for using SPI Communication 
#include <mcp2515.h>          // Library for using CAN Communication
#include <LiquidCrystal.h> 

const int rs = 3, en = 4, d4 = 5, d5 = 6, d6 = 7, d7 = 8;  
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);  // Define LCD display pins
struct can_frame canMsg;
MCP2515 mcp2515(10);                 // SPI CS Pin 10
void setup()
{
  Serial.begin(9600);                // Begins Serial Communication at 9600 baudrate
  SPI.begin();                       // Begins SPI communication
  lcd.begin(20, 4);
  lcd.clear();         
  lcd.setCursor(0, 0);
  lcd.print("CANBUS TUTORIAL");
  delay(3000);
  lcd.clear();
  pinMode(LED_BUILTIN, OUTPUT);
  mcp2515.reset();
  mcp2515.setBitrate(CAN_500KBPS, MCP_8MHZ); // Sets CAN at speed 500KBPS and Clock 8MHz
  mcp2515.setNormalMode();                  // Sets CAN at normal mode
}
void loop()
{
  if (mcp2515.readMessage(&canMsg) == MCP2515::ERROR_OK) // To receive data (Poll Read)
  {
    int x = canMsg.data[0];
    int y = canMsg.data[1];
    int z = canMsg.data[2];
    if(y > 28){
      digitalWrite(LED_BUILTIN, HIGH);
    }
 
    lcd.setCursor(0, 2);         // Display Temp & Humidity value received at 20x4 LCD
    lcd.print("Humidity: ");
    lcd.print(x);
    lcd.setCursor(0, 1);
    lcd.print("Temperature: ");
    lcd.print(y);
    delay(1000);
    lcd.clear();
  }
 
  canMsg.can_id  = 0x036;           // CAN id as 0x036
  canMsg.can_dlc = 8;               // CAN data length as 8
  canMsg.data[0] = 0x00;             
  canMsg.data[1] = 0x00;            // Update temperature value in [1]
  canMsg.data[2] = 0x00;            // Rest all with 0
  canMsg.data[3] = 0x00;
  canMsg.data[4] = 0x00;
  canMsg.data[5] = 0x00;
  canMsg.data[6] = 0x00;
  canMsg.data[7] = 0x00;
 
  mcp2515.sendMessage(&canMsg);     // Sends the CAN message
  delay(1000);
}
